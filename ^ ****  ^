package com.tom.floratalk;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Intent;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.tom.floratalk.data.Message;

import org.tensorflow.lite.Interpreter;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

public class ChatActivity extends AppCompatActivity {

    private RecyclerView chatsRV;
    private ImageView sendMsg;
    private EditText userMsg;
    private ImageView ivBack;
    private final String USER_KEY = "user";
    private final String BOT_KEY = "bot";


    private final int CAMERA_REQ_CODE = 100;
    static Uri uri;
    private static final String FOLDER_NAME = "Flora";

    private String description;
    // creating a variable for array list and adapter class.
    private ArrayList<Message> messageModalArrayList;
    private MessageAdapter messageAdapter;

    private Interpreter tflite;

    private ImageView btnCamera;

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);


        // on below line we are initializing all our views.
        chatsRV = findViewById(R.id.idRVChats);
        sendMsg = findViewById(R.id.idIBSend);
        userMsg = findViewById(R.id.idEdtMessage);



        btnCamera = findViewById(R.id.RequestImage);

        // 设置按钮点击事件
        btnCamera.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 打开相机
                Intent iCamera = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                startActivityForResult(iCamera, CAMERA_REQ_CODE);
            }
        });

        // creating a new array list
        messageModalArrayList = new ArrayList<>();


        // adding on click listener for send message button.
        sendMsg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // checking if the message entered
                // by user is empty or not.
                if (userMsg.getText().toString().isEmpty()) {
                    // if the edit text is empty display a toast message.
                    Toast.makeText(ChatActivity.this, "Please enter your message..", Toast.LENGTH_SHORT).show();
                    return;
                }

                String[] projection = {MediaStore.Images.Media.DATA};
                Cursor cursor = getContentResolver().query(uri, projection, null, null, null);
                if (cursor != null) {
                    try {
                        if (cursor.moveToFirst()) {
                            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                            String filePath = cursor.getString(column_index);
                            File imgFile = new File(filePath);

                            if (imgFile.exists()) {
                                // Execute the image captioning task in a background thread
                                ImageToText imageCaptioningTask = new ImageToText();
                                description = String.valueOf(imageCaptioningTask.execute(filePath));
                            }
                        }
                    } finally {
                        cursor.close();
                    }
                }


                // below line we are setting text in our edit text as empty
                userMsg.setText("");
            }
        });

        // on below line we are initializing our adapter class and passing our array list to it.
        messageAdapter = new MessageAdapter(messageModalArrayList, this);

        // below line we are creating a variable for our linear layout manager.
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this, RecyclerView.VERTICAL, false);

        // below line is to set layout
        // manager to our recycler view.
        chatsRV.setLayoutManager(linearLayoutManager);

        // below line we are setting
        // adapter to our recycler view.
        chatsRV.setAdapter(messageAdapter);















        //NLP
        try {
            tflite = new Interpreter(loadModelFile(this.getAssets(), "model.tflite"));
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Prepare input data
        String[] inputString = new String[1];
        inputString[0] = userMsg.getText().toString();
        float[][] outputVal = new float[1][1];

        // Run model
        tflite.run(inputString, outputVal);

        // Process output data
        String botReply = String.valueOf(outputVal[0][0]); // This is your result from the model

        // Add user message and bot reply to message list
        messageModalArrayList.add(new Message(USER_KEY, inputString[0]));
        messageModalArrayList.add(new Message(BOT_KEY, botReply));

        // Notify adapter that data has changed
        messageAdapter.notifyDataSetChanged();
    }

    private MappedByteBuffer loadModelFile(AssetManager assetManager, String modelPath) throws IOException {
        AssetFileDescriptor fileDescriptor = assetManager.openFd(modelPath);
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            if (requestCode == CAMERA_REQ_CODE) {
                if (data != null) {
                    Bitmap img = (Bitmap) data.getExtras().get("data");
                    btnCamera.setImageBitmap(img);

                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
                    File folder = new File(Environment.getExternalStorageDirectory(), FOLDER_NAME);
                    if (!folder.exists()) {
                        folder.mkdirs();
                    }
                    String fileName = timeStamp + ".jpg";
                    ContentValues values = new ContentValues();
                    values.put(MediaStore.Images.Media.DISPLAY_NAME, fileName);
                    values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");
                    values.put(MediaStore.Images.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + "/" + FOLDER_NAME);
                    uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
                    try {
                        OutputStream outputStream = getContentResolver().openOutputStream(uri);
                        if (outputStream != null) {
                            img.compress(Bitmap.CompressFormat.JPEG, 90, outputStream);
                            outputStream.close();
                            Toast.makeText(this, "Image saved successfully", Toast.LENGTH_SHORT).show();
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

}
